function pickCard() {
	var cards = [
		"üÇ°", "üÇ¢", "üÇ£", "üÇ§", "üÇ•", "üÇ¶", "üÇß", "üÇ®", "üÇ©", "üÇ™", "üÇ´", "üÇ¨", "üÇ≠", "üÇÆ", // ‚ô†
		"üÇ±", "üÇ≤", "üÇ≥", "üÇ¥", "üÇµ", "üÇ∂", "üÇ∑", "üÇ∏", "üÇπ", "üÇ∫", "üÇª", "üÇº", "üÇΩ", "üÇæ", // ‚ô•
		"üÉÅ", "üÉÇ", "üÉÉ", "üÉÑ", "üÉÖ", "üÉÜ", "üÉá", "üÉà", "üÉâ", "üÉä", "üÉã", "üÉå", "üÉç", "üÉé", // ‚ô¶
		"üÉë", "üÉí", "üÉì", "üÉî", "üÉï", "üÉñ", "üÉó", "üÉò", "üÉô", "üÉö", "üÉõ", "üÉú", "üÉù", "üÉû", // ‚ô£
		"üÉü" // Joker
	];
	
	const redSuits = [
		..."üÇ±üÇ≤üÇ≥üÇ¥üÇµüÇ∂üÇ∑üÇ∏üÇπüÇ∫üÇªüÇºüÇΩüÇæ", // ‚ô•
		..."üÉÅüÉÇüÉÉüÉÑüÉÖüÉÜüÉáüÉàüÉâüÉäüÉãüÉåüÉçüÉé"  // ‚ô¶
	];
	
	const pickone = cards[Math.floor(Math.random()*cards.length)];
	const cardEl = document.getElementById("card");
  
	cardEl.textContent = pickone;
	cardEl.className = redSuits.includes(pickone) ? "card red" : "card";
}

const observer = new MutationObserver((mutationsList, observer) => {
  const card = document.querySelector('.card');
  if (card) {
	// L'√©l√©ment est pr√©sent !
	card.addEventListener('mousemove', (e) => {
	  const rect = card.getBoundingClientRect();
	  const x = e.clientX - rect.left; // position souris X dans l'√©l√©ment
	  const y = e.clientY - rect.top;  // position souris Y dans l'√©l√©ment

	  const centerX = rect.width / 2;
	  const centerY = rect.height / 2;

	  const rotateX = -(y - centerY);
	  const rotateY = (x - centerX);
	  
	  card.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
	  
	  // Supposons que rotateX varie entre -30 (vers le haut) et +30 (vers le bas)
	  const brightness = 1 - rotateX / 90; // = 1 si vers le haut, <1 si vers le bas
	  card.style.filter = `brightness(${brightness})`;

	  if (rotateX < 0) {
	    card.style.boxShadow = '0 20px 40px rgba(255,255,255,0.3)';
	  } else {
	    card.style.boxShadow = '0 10px 20px rgba(0,0,0,0.3)';
	  }
	  
	});

	card.addEventListener('mouseleave', () => {
	  card.style.transform = `rotateX(0deg) rotateY(0deg)`;
	});

    observer.disconnect();
  }
});

observer.observe(document.body, { childList: true, subtree: true });


